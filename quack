#!/usr/bin/env python3

# MIT License
#
# Copyright (C) 2019-2020, Entynetproject. All Rights Reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import argparse
import sys

def main():

	# Parse args
	parser = argparse.ArgumentParser()
	parser.add_argument("--target", type = str, metavar = "<IP:port/URL/phone>",
					help = "Target IP:port, URL or phone.")
	parser.add_argument("--method", type = str, metavar = "[SMS|NTP|TCP|UDP|SYN|POD|SLOWLORIS|MEMCACHED|HTTP|NJRAT]",
					help = "Attack method.")
	parser.add_argument("--timeout", type = int, default = 10, metavar = "<timeout>",
					help = 'Timeout in secounds.')
	parser.add_argument("--threads", type = int, default = 3, metavar = "<threads>",
					help = "Threads count.")
	parser.add_argument("-u", "--update", action='store_true', dest="update", help = "Update Quack Toolkit.")
	
	# Get args
	args = parser.parse_args()
	threads = args.threads
	time = args.timeout
	method = str(args.method).upper()
	target = args.target

	if method == "NTP":
		import tools.addons.clean
		import tools.addons.logo
		from tools.L4.ntp import NTP_ATTACK
		NTP_ATTACK(threads, time, target)
		
	elif args.update:
		import os
		os.system("chmod +x bin/quack && bin/quack -u")
		sys.exit()

	elif method == "SYN":
		import tools.addons.clean
		import tools.addons.logo
		from tools.L4.syn import SYN_ATTACK
		SYN_ATTACK(threads, time, target)

	elif method == "TCP":
		import tools.addons.clean
		import tools.addons.logo
		from tools.L4.tcp import TCP_ATTACK
		TCP_ATTACK(threads, time, target)

	elif method == "POD":
		import tools.addons.clean
		import tools.addons.logo
		from tools.L4.pod import POD_ATTACK
		POD_ATTACK(threads, time, target)

	elif method == "NJRAT":
		import tools.addons.clean
		import tools.addons.logo
		from tools.L4.njrat import NJRAT_ATTACK
		NJRAT_ATTACK(threads, time, target)

	elif method == "UDP":
		import tools.addons.clean
		import tools.addons.logo
		from tools.L4.udp import UDP_ATTACK
		UDP_ATTACK(threads, time, target)

	elif method == "HTTP":
		import tools.addons.clean
		import tools.addons.logo
		from tools.L7.http import HTTP_ATTACK
		HTTP_ATTACK(threads, time, target)

	elif method == "SLOWLORIS":
		import tools.addons.clean
		import tools.addons.logo
		from tools.L7.slowloris import SLOWLORIS_ATTACK
		SLOWLORIS_ATTACK(threads, time, target)
	
	elif method == "MEMCACHED":
		import tools.addons.clean	
		import tools.addons.logo
		from tools.L4.memcached import MEMCACHED_ATTACK
		MEMCACHED_ATTACK(threads, time, target)

	elif method == "SMS":
		import tools.addons.clean
		import tools.addons.logo
		from tools.SMS.main import SMS_ATTACK
		SMS_ATTACK(threads, time, target)

	else:
		parser.print_help()

if __name__ == '__main__':
	main()
